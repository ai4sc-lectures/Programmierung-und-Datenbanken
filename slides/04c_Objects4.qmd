---
title: "Programmieren und Datenbanken - Objektorientierung"
author: "Joern Ploennigs"
format: revealjs
---

# Objektorientierung

> Midjourney: Objects in the rear mirror may appear closer than they are

---

# Zielsetzung

<div class="flex">
<div class="column">

Lernen der Grundidee der Objektorientierung  
Ein grundsätzliches Verständnis der Programmierung mit Objekten  
Datentypen vs. Klassen  
Funktionen vs. Methoden

</div>
<div class="column">

Einführung in erweiterte Konzepte wie z. B. Vererbung

</div>
</div>

---

# Objektorientierte Programmierung

Objektorientierte Programmierung (OOP) ist ein Programmierparadigma das annimmt, dass ein Programm ausschließlich aus Objekten besteht, die miteinander kooperativ interagieren.

Jedes Objekt verfügt über:
- Attribute (Eigenschaften)
- Methoden

---

# Warum Objekte – Das syntaktische Problem wiederholter Datenstrukturen

Objekte werden verwendet, um festzulegen wie Datenstrukturen die sich wiederholen gespeichert werden.

```python
punkt_1 = (54.083336, 12.108811)
punkt_2 = [12.108811, 54.083336]
```

Was ist der Syntax der Werte?

---

# Warum Objekte – Das semantische Problem wiederholter Datenstrukturen

Objekte werden auch verwendet, um die Semantik von Werten einer Datenstruktur eindeutig zu definieren.

```python
punkt_1 = (54.083336, 12.108811)
punkt_2 = (12.108811, 54.083336)
```

Was ist die Semantik dieser Werte?

---

# Warum Objekte – Das Verhaltensproblem wiederholter Datenstrukturen

Objekte bündeln Funktionen und Datenstrukturen.

```python
def distanz(a, b):
    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)

punkt_1 = (54.083336, 12.108811)
punkt_2 = (12.108811, 54.083336)

distanz(punkt_1, punkt_2)

linie_1 = [(54.08, 12.11), (54.10, 12.11)]
linie_2 = [(12.11, 54.08), (12.20, 54.10)]

distanz(linie_1, linie_2)
```

---

# Grundlagen der Objektorientierung

Anstatt unübersichtlich viele verstreute Datenstrukturen und Funktionen zu benutzen, gruppieren wir diese in Objekte.

Eine Klasse definiert:
- welche Attribute ein Objekt besitzt
- welche Methoden es bereitstellt

---

# Klassen und Instanzen

Objekte sind Instanzen einer Klasse (Klasse = Bauplan)

<div class="flex">
<div class="column">

Klasse  
Instanz 1  
Instanz n

</div>
<div class="column">

Punkt  
punkt_1  
punkt_n

</div>
</div>

---

# Objektorientierung in Python

Python ist objektorientiert – alle Datentypen sind Objekte.

- Jeder Datentyp hat: Wert, Typ, Identität
- Variablen sind Referenzen

---

# Klassen definieren

```python
class Klassenname:
    # Klassendefinition
```

---

# Konstruktoren mit der init-Methode

```python
class Punkt:
    def __init__(self, x, y):
        self.x = x
        self.y = y
```

---

# Instanzen erzeugen

```python
punkt_1 = Punkt(54.083336, 12.108811)
punkt_2 = Punkt(12.108811, 54.083336)
```

---

# Attribute auf Instanzebene

```python
class Punkt:
    def __init__(self, x, y):
        self.x = x
        self.y = y
```

Instanzattribute unterscheiden sich pro Instanz.

---

# Attribute auf Klassenebene

```python
class Punkt:
    einheit = "m"
```

Klassenattribute gelten für alle Instanzen.

---

# Methoden

```python
class Punkt:
    def distanz(self, punkt_2):
        return math.sqrt((self.x - punkt_2.x)**2 + (self.y - punkt_2.y)**2)
```

---

# Methoden aufrufen

```python
punkt_1.distanz(punkt_2)
print(punkt_1.x, punkt_1.y)
punkt_1.x = 20
```

---

# Fragen?

> Midjourney: A psychedelic DJ with a question mark for a head
