---
title: Programmierung<br>& Datenbanken
subtitle: "Verzweigung"
author: "Joern Ploennigs"
format:
  revealjs:
    theme: [default, clean.scss, custom.scss]
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/ai4sc_logo_v2.svg
    footer: |
      <span style="letter-spacing: .04rem;">programmierung</span><br><span style="letter-spacing: .0rem;">und datenbanken</span>
    transition: slide
    transition-speed: fast
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-color: black
    menu:
      side: left
    slide-number: true
    date-format: long
---

 
# Überblick {background="#333"}
<div class="midjourneyXX_frame">
![Midjourney: Application of ML in Construction](images/ueberblick/mj_application_of_machine_learning_in_construction.png){class="midjourneyXX"}
</div>



## Slide 1


Einführung in Programmierung und Datenbanken

joern ploennigs

programmieren und datenbanken - verzweigungen

1

![Image 1](images/03b_Verzweigung/image_1.png)

## Slide 2


2

programmieren und datenbanken - verzweigungen

Programmierung und Datenbanken

Motivation

Computer und Architekturen

Programmierung und Datentypen

Fehler und Debugging

Objektorientierung u. Softwareentwurf

Verzweigungen und Schleifen

Funktionen und  Rekursion

grundlagen

modellierung

![Image 2](images/03b_Verzweigung/image_2.wmf)

## Slide 3


3

Verzweigungen

DALL-E 2: A painting of Bob Ross painting a self portrait, infinite recursion

programmieren und datenbanken - verzweigungen

![Image 3](images/03b_Verzweigung/image_3.jpg)

## Slide 4


4

programmieren und datenbanken - verzweigungen

Zielsetzung

Heute wollen wir uns anschauen wie man den Ablauf der Statements dynamisch verändern kann – speziell wie man bedingte Verzweigungen nutzen kann.

Außerdem: Wie plant und konzeptioniert man den Ablauf eines Programmes?

## Slide 5


5

Programmablauf

Programme können als Abfolge von durchnummerierten Statements betrachtet werden.
Diese werden Zeile für Zeile ausgeführt.

Erinnerung: Statements in Funktionen werden erst ausgeführt wenn die Funktion gerufen wird.

programmieren und datenbanken - verzweigungen

## Slide 6


6

Programmablauf - Beispiel

x = 3
y = 4
 
def pythagoras(a, b):
 	return sqrt((a**2)+(b**2))
 
z = pythagoras (x, y)
print(z)

programmieren und datenbanken - verzweigungen

# Zuweisung
 # Zuweisung

# Abspeichern der Funktion

# Funktionsaufruf

# Variablenausgabe

Output: 5

# Berechnung

# Zuweisung zu z

## Slide 7


7

programmieren und datenbanken - verzweigungen

Verzweigungen - Bedingtes Verzweigen

Wir können Steueranweisungen benutzen, die basierend auf einer Bedingung ein bestimmtes Statement „ansteuern“.
Diese Bedingungen sind Statements deren Ausgabe ein Boolean-Wert (True oder False) ist.
Beispiele für solche Statements:
True      # Logische Werte
a 	     # Variablen Werte, wenn a mit einem Bool belegt wurde, bzw. das Bool-Äquivalent von a
2 < 5 	     # Alle Vergleichsoperatoren

## Slide 8


8

programmieren und datenbanken - verzweigungen

Verzweigungen – Wenn … Dann …

Die Grundform solcher Verzweigungen ist also immer:
	„Wenn die Bedingung zutrifft, dann führe folgende Statements aus“
Oft folgt außerdem ein „sonst führe stattdessen folgendes Statement aus“

Python kennt drei Anweisungen zur Verzweigung:
if          # wenn
else     # sonst
elif       # kurz für else-if

## Slide 9


9

programmieren und datenbanken - verzweigungen

Verzweigungen - if-Statement

Die If-Anweisung ist nötig um eine Verzweigung zu beginnen.
Die Notation folgt demselben Prinzip wie bei Funktionsdefinitionen, aber ohne Namen:

	if Bedingung:   
		# dann führe den folgenden Block nur aus wenn die Bedingung wahr ist
		Statement1
		Statement2 …

Ist die Bedingung True, werden die folgenden eingerückten Statements ausgeführt.

## Slide 10


10

programmieren und datenbanken - verzweigungen

Verzweigungen - If-Statement als optionaler Code

Steht if alleine, sorgt es dafür, dass der folgende Code-Block optional ist.

Dieser Code hat keine Alternative sein, daher ist das Programm in diesem Fall nicht im klassischen Sinne „verzweigt“.

Kann auch als Möglichkeit zum Überspringen von Codes verstanden werden.

## Slide 11


11

programmieren und datenbanken - verzweigungen

Verzweigungen - Beispiel: if-Statement zum Überspringen von Code

activateOutput = True
a = 10
b = 13
c = pythagoras(a, b)
if activateOutput:
	print(“Seitenlänge:“ + c)
umfang = a + b + c
…

## Slide 12


12

programmieren und datenbanken - verzweigungen

Verzweigungen - else-Statement

else folgt nur auf ein if.
Wird ausgeführt wenn die im if angegebene Bedingung false zurückgibt.
Funktioniert ebenso über Einrückung:
	if Bedingung:   
		# dann führe den folgenden Block nur aus wenn Bedingung wahr ist
		Statement1
		Statement2 …
	else:
		Statement1b …

## Slide 13


13

programmieren und datenbanken - verzweigungen

Verzweigungen - Beispiel: Division durch 0 abfangen (Einfache Verzweigung)

a = 5
b = 0
if b: # der Wahrheitswert eines int-Wertes ist false bei 0 und Wahr für != 0 
	c = a / b
else:
	print(“Division by Zero“)
	c = None

## Slide 14


14

programmieren und datenbanken - verzweigungen

Verzweigungen - Beispiel: Division durch 0 abfangen (Einfache Verzweigung)

a = 5
b = 0
if b != 0:
	c = a / b
else:
	print(“Division by Zero“)
	c = None

## Slide 15


15

programmieren und datenbanken - verzweigungen

Verzweigungen - Verschachtelte Verzweigungen

Durch mehrfaches Einrücken können wir Verzweigungen in Verzweigungen definieren
	if Condition1:
		StatementA
	else:
		if Condition2:
			StatementB
		else:
			StatementC

## Slide 16


16

programmieren und datenbanken - verzweigungen

Verzweigungen - Beispiel: Vorzeichen testen (verschachtelte Verzweigung)

def sign(a)
	if a < 0:
		print(“Number is negative“)
	else:
		if a > 0:
			print(“Number is positive“)
		else:
			print(“Number is zero“)

## Slide 17


17

programmieren und datenbanken - verzweigungen

Verzweigungen - Mehrfachverzweigung: elif-Statement

Anstatt einer else-Anweisung können wir die elif-Anweisung verwenden, welche wie if eine Bedingung hat.

Auf eine elif-Anweisung können folgen:
Eine weitere elif-Anweisung
Else-Anweisung - wird aufgerufen wenn keine der bisherigen Anweisungen zutraf
Keine Anweisung – zweite Variante vom optionalen Code

## Slide 18


18

programmieren und datenbanken - verzweigungen

Verzweigungen - Beispiel: Vorzeichen testen (Mehrfachverzweigung)

def sign(a)
	if a < 0:
		print(“Number is negative“)
	elif a > 0:
		print(“Number is positive“)
	else:
		print(“Number is zero“)

## Slide 19


19

programmieren und datenbanken - verzweigungen

Verzweigungen - Neu in Python 3.10: Match-Statements

Programmiersprachen entwickeln sich stetig weiter.
Anstatt viele elif-Anweisungen mit dem == Operator, geben wir eine Variable ein, deren Wert gegen mehrere Optionen geprüft wird.

if Variable == ValueA:
	StatementA
elif Variable == ValueB:
	StatementB
else:
	StatementC

match(Variable)
	case ValueA:
		StatementA
	case ValueB:
		StatementB
	case _:
		StatementC

## Slide 20


20

Fragen?

DALL-E 2: A psychedelic DJ with a question mark for a head

programmieren und datenbanken - verzweigungen