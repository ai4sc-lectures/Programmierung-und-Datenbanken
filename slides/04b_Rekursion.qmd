---
title: Programmierung<br>& Datenbanken
subtitle: "Rekursion"
author: "Joern Ploennigs"
format:
  revealjs:
    theme: [default, clean.scss, custom.scss]
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/ai4sc_logo_v2.svg
    footer: |
      <span style="letter-spacing: .04rem;">programmierung</span><br><span style="letter-spacing: .0rem;">und datenbanken</span>
    transition: slide
    transition-speed: fast
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-color: black
    menu:
      side: left
    slide-number: true
    date-format: long
---

 
# Überblick {background="#333"}
<div class="midjourneyXX_frame">
![Midjourney: Application of ML in Construction](images/ueberblick/mj_application_of_machine_learning_in_construction.png){class="midjourneyXX"}
</div>



## Slide 1


Einführung in Programmierung und Datenbanken

joern ploennigs

programmieren und datenbanken - rekursion

![](images/04b_Rekursion/image_1.png)

## Slide 2


Rekursion in Funktionen

DALL-E 2: Library of Babel

programmieren und datenbanken - rekursion

![](images/04b_Rekursion/image_2.png)

## Slide 3


programmieren und datenbanken - rekursion

Rekursion - Allgemein

Wikipedia: „ Als Rekursion (lateinisch recurrere ‚zurücklaufen') wird ein prinzipiell unendlicher Vorgang, der sich selbst als Teil enthält oder mithilfe von sich selbst definierbar ist, bezeichnet. “

Praktisch gesprochen: Rekursion geschieht immer dann, wenn eine Funktion sich selbst aufruft.

Rekursionen werden insbesondere bei Divide-and-Conquer-Algorithmen oder bei kombinatorischen Problemen verwendet.

## Slide 4


programmieren und datenbanken - rekursion

Rekursion - In Python

Wir benötigen nichts weiter als eine Funktionsdefinition die sich wieder selbst aufruft

def rekursive_funktion():
	Statement1
	 rekursive_funktion()

## Slide 5


programmieren und datenbanken - rekursion

Rekursion - Beispiel: Fakultät

Die Fakultät einer Zahl ist definiert als Produkt der natürlichen Zahlen von 1 bis n





def factorial_recursiv(x):
    if x > 1:
        return x * factorial_recursiv(x-1)
    else:
        return 1

![](images/04b_Rekursion/image_3.png)

## Slide 6


Informatik-Exkurs: Endlosrekursion, Stack

Bei rekursiven Funktionen gibt es das selbe Problem, wie bei while-Schleifen: Sie können sich (theoretisch) endlos verzweigen!
Deshalb sollte mindestens ein Pfad in der Funktion nicht rekursiv sein.

Praktisch kommt es allerdings bei endloser Rekursion zu Stack-Overflow-Fehlern. Das liegt daran, dass Python nachvollziehen muss, welche Funktion welche andere aufgerufen hat, um beim beenden in die richtige Funktion und Position zurückzukehren. Das geschieht über eine Liste die sich Stack nennt.

programmieren und datenbanken - rekursion

main()

factorial(1)

factorial(2)

factorial(3)

factorial(4)

factorial(5)

Stack-Größe

## Slide 7


Informatik-Exkurs: Endlosrekursion, Stack

Der Stack ist eine LIFO-Liste (Last In First Out) bei der das letzte Element das hinzugefügt wird (die neu aufgerufene Funktion) auch das erste sein muss, was entfernt wird (wenn die neu aufgerufene Funktion wird beendet). Quasi wie ein Bücherstapel.

programmieren und datenbanken - rekursion

main()

factorial(1)

factorial(2)

factorial(3)

factorial(4)

factorial(5)

Stack-Größe

## Slide 8


Informatik-Exkurs: Endlosrekursion, Stack

Die Stack wird bei endloser Rekursion so groß, dass er nicht mehr in den vorgesehenen Speicher passt, so das es ein Stack-Overflow-Fehler ist.

Das ist ein fataler Fehler der nicht abgefangen werden kann und zum Absturz des Programmes führt.

programmieren und datenbanken - rekursion

main()

factorial(1)

factorial(2)

factorial(3)

factorial(4)

factorial(5)

factorial(…)

Stack-Größe

## Slide 9


Informatik-Exkurs: Endlosrekursion, Heap

Übrigens werden die Variablen nicht im Stack abgespeichert, sondern liegen im Heap. Dieser kann im Vergleich zum Stack so groß werden wie der Arbeitsspeicher und gleicht mehr einer FIFO-Liste (First In First Out), da der Speicher von alten Variablen, die nicht mehr Gültigkeit haben frei gegeben wird.

programmieren und datenbanken - rekursion

Stack
(Funktionsaufrufe)

Heap
(Variablen)

## Slide 10


Fragen?

DALL-E 2: A psychedelic DJ with a question mark for a head

programmieren und datenbanken - rekursion