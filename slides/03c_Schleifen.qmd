---
title: "Einführung in Programmierung und Datenbanken"
subtitle: "Schleifen"
author: "Joern Ploennigs"
format: 
  revealjs:
    theme: default
    slide-number: true
    chalkboard: true
    preview-links: auto
---

## Programmierung und Datenbanken

<div style="display: flex; gap: 2rem;">

<div style="flex: 1;">
Themen:
- Motivation Computer und Architekturen
- Programmierung und Datentypen
- Fehler und Debugging
- Objektorientierung u. Softwareentwurf
</div>

<div style="flex: 1;">
- Verzweigungen und Schleifen ← *Heute*
- Funktionen und Rekursion
- Grundlagen
- Modellierung
</div>

</div>

---

## Schleifen

![DALL·E 2: Infinite loop of octopuses, mathematical art by M.C. Escher ceramic dish](https://via.placeholder.com/600x400/87CEEB/000000?text=Escher+Octopus+Loop)

---

## Schleifen - Allgemein

Wird genau wie die if/else-Anweisungen durch eine Bedingung kontrolliert

Rufen eine Folge von Statements wiederholt auf

<div style="display: flex; gap: 2rem;">

<div style="flex: 1;">
Bekannte Anzahl an Wiederholungen:
- For-Loop: Wiederhole n-mal
- For-Each-Loop (Iterator): Wiederhole für jedes Element in einer Sequenz
</div>

<div style="flex: 1;">
Unbekannte Anzahl an Wiederholungen:
- While-Loop: Wiederhole bis eine Bedingung wahr ist (ggf. nie)
- Do-While-Loop: Wiederhole bis eine Bedingung falsch ist (mindestens einmal)
- Repeat-Until-Loop: Wiederhole bis eine Bedingung wahr wird (mindestens einmal)
</div>

</div>

---

## Schleifen – In Python

In Python sind verfügbar:
- `for` (Entspricht For-Each-Loop)
- `while` (Entspricht While-Loop)

Wichtige Eigenschaften:
- Funktionieren genau wie alle anderen Steueranweisungen durch Einrückungen nach einer einzeiligen Definition
- Anders als in Funktionen sind Variablen aus Schleifen auch außerhalb der Schleife verfügbar!
- Die anderen Loop-Varianten sind zwar nicht explizit vorhanden, aber funktionell nachbildbar

---

## Schleifen - FOR-Loop

Der for-Loop wiederholt ein Block an Statements für alle Elemente in einer Sequenz. Element ist dabei eine Variable die immer mit dem aktuellen Element aus der Sequenz belegt wird.

```python
for Element in Sequenz:
    # Statement
```

---

## Schleifen - FOR-Each-Loop Beispiel

Der for-Loop in Python ist ein For-Each-Loop. Er iteriert immer durch eine Sequenz an Werten, wie z.B. eine Liste. Die Variable des Iterators `e` enthält dabei den aktuellen Wert der Liste `seq`.

<div style="display: flex; gap: 2rem;">

<div style="flex: 1.5;">
```python
seq = ['a','b','c']
for e in seq:
    print(e)
```
</div>

<div style="flex: 1;">
Ausgabe:
```
a
b
c
```
</div>

</div>

---

## Schleifen - FOR-Loop Beispiel

Der for-Loop in Python kann auch als klassischer For-Loop verwendet werden, bei der man n-mal etwas wiederholt. Dazu erzeugt man mit der `range(n)`-Funktion eine Folge an Zahlen, durch die dann das For-Each-Loop iteriert wird.

<div style="display: flex; gap: 2rem;">

<div style="flex: 1.5;">
```python
n = 3
seq = range(n)
for e in seq:
    print(e)
```
</div>

<div style="flex: 1;">
Ausgabe:
```
0
1
2
```
</div>

</div>

---

## Schleifen - FOR-Loop Beispiel

Damit kann man dann zum Beispiel eine Liste an Messwerten aus imperialen Fuß in metrische Meter umwandeln.

```python
measurements_feet = [4.2, 2.3, 6.2, 10.5]  # Eingabe
measurements_meter = []  # Ergebnisse

for feets in measurements_feet:
    measurements_meter.append(0.3048 * feets)

print(measurements_meter)
```

Ausgabe:
```
[1.2801600000000002, 0.70104, 1.88976, 3.2004]
```

---

## Schleifen - WHILE-Loop

Die while-Loop-Schleife wird so lange ausgeführt so lange bis eine Bedingung wahr ist. Da diese am Anfang geprüft wird und von Anfang an falsch sein kann, muss der Inhalt nicht ausgeführt werden.

```python
while Bedingung:
    # Statement
```

Wie beim if wird die Bedingung auf seinen Wahrheitswert geprüft:
- Ist dieser `True` läuft die Schleife einmal durch, woraufhin wieder geprüft wird
- Ist dieser `False` endet die Schleife und der Code wird nicht (noch einmal) ausgeführt

---

## Schleifen - While-Loop vs. Do-While-Loop vs. Repeat-Until

<div style="display: flex; gap: 1.5rem;">

<div style="flex: 1;">
While-Loop

Im While-Loop kann die Bedingung schon am Anfang falsch sein. Die Schleife muss also nicht ausgeführt werden.

```python
Bedingung = True/False
while Bedingung:
    # Statement
    Bedingung = False
```
</div>

<div style="flex: 1;">
Do-While-Loop

Im Do-While-Loop wird die Bedingung erst am Ende geprüft. Die Schleife wird also immer mindestens einmal durchlaufen.

```python
Bedingung = True
while Bedingung:
    # Statement
    Bedingung = False
```
</div>

<div style="flex: 1;">
Repeat-Until-Loop

Beim Repeat-Until-Loop wird die Bedingung auch erst am Ende geprüft. Die Schleife wird wiederholt bis die Bedingung wahr wird.

```python
Bedingung = False
while not Bedingung:
    # Statement
    Bedingung = True
```
</div>

</div>

---

## Schleifen - Endlosschleifen!

While-Schleifen haben keine maximale Wiederholungsanzahl. Sie können potentiell für immer laufen, wenn sich die Bedingung nie ändert.

⚠️ Es ist daher immer wichtig zu durchdenken, ob es den Fall gibt in dem sich die Bedingung nicht ändern kann und dann eine zweite Abbruchsbedingung hinzuzufügen.

```python
Bedingung = True
while Bedingung:  # DAS IST EINE ENDLOSSCHLEIFE
    # Statement
    Bedingung = True  # Bedingung ändert sich nie!
```

---

## Schleifen - Schleife verfrüht abbrechen

`break`-Befehl: Bricht die Wiederholschleife an der aktuellen Position ab

`continue`-Befehl: Bricht die Schleife nicht ab, sondern beginnt direkt die nächste Iteration

```python
dinge_in_meinem_rucksack = ["Papier", "Stift", "Apfel", "Brot", "Messer"]
essbares = {"Apfel", "Brot"}
essbar = None

for ding in dinge_in_meinem_rucksack:  # Finde das erste essbare Ding
    if ding not in essbares:
        print(f"Überspringe {ding}")
        continue
    print(f"Essbares gefunden {ding}")
    essbar = ding
    break

print(essbar)
```

---

## Schleifen - Schleife verfrüht abbrechen

Mit `break` lassen sich zusätzliche Abbruchbedingungen realisieren, wie z.B. eine maximale Ausführzeit. Hier definieren wir einen zusätzlichen Timeout in einer Endlosschleife von 3 Sekunden:

```python
import time

iterations = 0
start = time.time()

while True:  # DAS IST EINE ENDLOSSCHLEIFE
    iterations += 1
    elapsed = time.time() - start
    
    if elapsed > 3:
        print(f"Timeout after {iterations} iterations")
        break
```

---

## Programmflusskontrolle

Wir kennen nun zwei Werkzeuge:

<div style="display: flex; gap: 2rem;">

<div style="flex: 1;">
Bedingte Ausführung:
- `if`, `else`, `elif`
</div>

<div style="flex: 1;">
Mehrfachausführung:
- `while`, `for`
</div>

</div>

Jedes Programm, was jemals auf einem Computer ausgeführt wurde, könnte mit diesen Mitteln geschrieben werden.

---

## Hörsaalfrage

![DALL·E 2: A psychedelic DJ with a question mark for a head](https://via.placeholder.com/400x400/FFB6C1/000000?text=DJ+Question+Mark)

Fragen?