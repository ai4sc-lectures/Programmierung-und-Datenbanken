---
title: Programmierung<br>& Datenbanken
subtitle: "Verzweigung"
author: "Joern Ploennigs"
format:
  revealjs:
    theme: [white, custom.scss]
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/ai4sc_logo_v2.svg
    footer: |
      <span style="letter-spacing: .04rem;">programmierung</span><br><span style="letter-spacing: .0rem;">und datenbanken</span>
    transition: slide
    transition-speed: fast
    menu:
      side: left
    slide-number: true
    date-format: long
    auto-play-media: true
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-color: black
      data-background-video: images/03b_Verzweigung/mj_title.mp4
      data-background-video-loop: true
      data-background-video-muted: true
---

## Ablauf

![](images/partA_4.svg)


## Verzweigungen

![DALL·E 2: A painting of Bob Ross painting a self portrait, infinite recursion](https://via.placeholder.com/600x400/87CEEB/000000?text=Bob+Ross+Self+Portrait+Recursion)


## Zielsetzung

**Heute wollen wir uns anschauen:**

- Wie man den Ablauf der Statements dynamisch verändern kann
- Speziell wie man bedingte Verzweigungen nutzen kann
- Wie plant und konzeptioniert man den Ablauf eines Programmes?


## Programmablauf

- Programme können als Abfolge von durchnummerierten Statements betrachtet werden
- Diese werden Zeile für Zeile ausgeführt
- **Erinnerung:** Statements in Funktionen werden erst ausgeführt wenn die Funktion gerufen wird

## Verzweigungen - Bedingtes Verzweigen

Wir können Steueranweisungen benutzen, die basierend auf einer Bedingung ein bestimmtes Statement „ansteuern".

**Diese Bedingungen sind Statements deren Ausgabe ein Boolean-Wert (True oder False) ist:**

- `True` - Logische Werte
- `a` - Variablen Werte, wenn a mit einem Bool belegt wurde, bzw. das Bool-Äquivalent von a
- `2 < 5` - Alle Vergleichsoperatoren

## Verzweigungen – Wenn … Dann …

**Die Grundform solcher Verzweigungen ist:**
> „Wenn die Bedingung zutrifft, dann führe folgende Statements aus"

Oft folgt außerdem ein „sonst führe stattdessen folgendes Statement aus"

**Python kennt drei Anweisungen zur Verzweigung:**
- `if` - wenn
- `else` - sonst  
- `elif` - kurz für else-if

---

## Verzweigungen - IF-Statement

Die If-Anweisung ist nötig um eine Verzweigung zu beginnen.

**Notation folgt demselben Prinzip wie bei Funktionsdefinitionen:**

```python
if Bedingung:
    # dann führe den folgenden Block nur aus wenn die Bedingung wahr ist
    Statement1
    Statement2
    # ...
```

**Ist die Bedingung True, werden die folgenden eingerückten Statements ausgeführt.**

---

## Beispiel: IF-Statement zum Überspringen von Code

```python
activateOutput = True
a = 10
b = 13
c = pythagoras(a, b)

if activateOutput:
    print("Seitenlänge:" + str(c))
    umfang = a + b + c
    # ...
```

---

## Verzweigungen - ELSE-Statement

- `else` folgt nur auf ein `if`
- Wird ausgeführt wenn die im `if` angegebene Bedingung `false` zurückgibt
- Funktioniert ebenso über Einrückung:

```python
if Bedingung:
    # dann führe den folgenden Block nur aus wenn Bedingung wahr ist
    Statement1
    Statement2
    # ...
else:
    Statement1b
    # ...
```

---

## Beispiel: Division durch 0 abfangen (Einfache Verzweigung)

**Version 1:**
```python
a = 5
b = 0
if b:  # der Wahrheitswert eines int-Wertes ist false bei 0 und Wahr für != 0
    c = a / b
else:
    print("Division by Zero")
    c = None
```

**Version 2 (expliziter):**
```python
a = 5
b = 0
if b != 0:
    c = a / b
else:
    print("Division by Zero")
    c = None
```

---

## Verzweigungen - Verschachtelte Verzweigungen

Durch mehrfaches Einrücken können wir Verzweigungen in Verzweigungen definieren:

```python
if Condition1:
    StatementA
else:
    if Condition2:
        StatementB
    else:
        StatementC
```

---

## Beispiel: Vorzeichen testen (Verschachtelte Verzweigung)

```python
def sign(a):
    if a < 0:
        print("Number is negative")
    else:
        if a > 0:
            print("Number is positive")
        else:
            print("Number is zero")
```

---

## Verzweigungen - Mehrfachverzweigung: ELIF-Statement

Anstatt einer `else`-Anweisung können wir die `elif`-Anweisung verwenden, welche wie `if` eine Bedingung hat.

**Auf eine `elif`-Anweisung können folgen:**
- Eine weitere `elif`-Anweisung
- `else`-Anweisung - wird aufgerufen wenn keine der bisherigen Anweisungen zutraf
- Keine Anweisung – zweite Variante vom optionalen Code

---

## Beispiel: Vorzeichen testen (Mehrfachverzweigung)

```python
def sign(a):
    if a < 0:
        print("Number is negative")
    elif a > 0:
        print("Number is positive")
    else:
        print("Number is zero")
```

**Viel sauberer und lesbarer als verschachtelte if-else Statements!**

---

## Neu in Python 3.10: MATCH-Statements

<div style="display: flex; gap: 2rem;">

<div style="flex: 1;">
**Traditionell (viele elif):**
```python
if Variable == ValueA:
    StatementA
elif Variable == ValueB:
    StatementB
else:
    StatementC
```
</div>

<div style="flex: 1;">
**Neu (match-case):**
```python
match Variable:
    case ValueA:
        StatementA
    case ValueB:
        StatementB
    case _:
        StatementC
```
</div>

</div>

Programmiersprachen entwickeln sich stetig weiter!

---

## Hörsaalfrage

![DALL·E 2: A psychedelic DJ with a question mark for a head](https://via.placeholder.com/400x400/FFB6C1/000000?text=DJ+Question+Mark)

**Fragen?**