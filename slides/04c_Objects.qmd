---
title: Programmierung<br>& Datenbanken
subtitle: "Objerktorientierung"
author: "Joern Ploennigs"
format:
  revealjs:
    theme: [default, clean.scss, custom.scss]
    chalkboard: 
      buttons: false
    preview-links: auto
    logo: images/ai4sc_logo_v2.svg
    footer: |
      <span style="letter-spacing: .04rem;">programmierung</span><br><span style="letter-spacing: .0rem;">und datenbanken</span>
    transition: slide
    transition-speed: fast
    template-partials:
      - title-slide.html
    title-slide-attributes:
      data-background-color: black
    menu:
      side: left
    slide-number: true
    date-format: long
---

 
# Überblick {background="#333"}
<div class="midjourneyXX_frame">
![Midjourney: Application of ML in Construction](images/ueberblick/mj_application_of_machine_learning_in_construction.png){class="midjourneyXX"}
</div>



## Slide 1


Einführung in Programmierung und Datenbanken

joern ploennigs

programmieren und datenbanken - objektorientierung

![](images/04c_Objects/image_1.png)

## Slide 2


2

programmieren und datenbanken

Programmierung und Datenbanken

Motivation

Computer und Architekturen

Programmierung und Datentypen

Fehler und Debugging

Objektorientierung u. Softwareentwurf

Verzweigungen und Schleifen

Funktionen und  Rekursion

grundlagen

modellierung

![](images/04c_Objects/image_2.wmf)

## Slide 3


3

Objektorientierung

Midjourney: Objects in the rear mirror may appear closer than they are

programmieren und datenbanken - objektorientierung

## Slide 4


4

programmieren und datenbanken - objektorientierung

Zielsetzung

Lernen der Grundidee der Objektorientierung
Ein grundsätzliches Verständnis der Programmierung mit Objekten
Datentypen vs. Klassen
Funktionen vs. Methoden

Einführung in erweiterte Konzepte wie z. B. Vererbung

## Slide 5


5

programmieren und datenbanken - objektorientierung

Objektorientierte Programmierung

Objektorientierte Programmierung (OOP) ist ein Programmierparadigma das annimmt, dass ein Programm ausschließlich aus Objekten besteht, die miteinander kooperativ interagieren. Jedes Objekt verfügt über Attribute (Eigenschaften) und Methoden. Die Attribute definieren dabei Werte über den Zustand eines Objektes. Die Methoden definieren die möglichen Zustandsänderungen (Handlungen) eines Objektes.

## Slide 6


6

programmieren und datenbanken - objektorientierung

Warum Objekte – Das syntaktische problem wiederholter Datenstrukturen

Objekte werden verwendet, um festzulegen wie Datenstrukturen die sich wiederholen gespeichert werden. Hierbei geht es darum, dass der Syntax der Datenstruktur eindeutig ist.
Wächst das Programm an, so wächst auch die Menge der Variablen und Datenstrukturen
… zur Speicherung von Daten
… zur Kontrolle des Programmflusses
… zum Abspeichern von Zuständen
… zum Verarbeiten von Ein- und Ausgaben
Dabei basieren die zugrundeliegenden Elemente meist auf sich wiederholenden Datenstrukturen. 
Analysiert man z. B. Baupläne oder Karten so verwaltet man viele Punkt-Koordinaten. Hierbei kann man unterschiedliche Koordinaten als Tupel ausdrücken.

punkt_1 = (54.083336, 12.108811)
punkt_2 = [12.108811, 54.083336]

Was ist der Syntax der Werte?

## Slide 7


7

programmieren und datenbanken - objektorientierung

Warum Objekte – Das semantische problem wiederholter Datenstrukturen

Objekte werden auch verwendet, um die Semantik von Werten einer Datenstruktur eindeutig zu definieren.

Haben wir uns z. B. darauf geeinigt, dass wir ein Punkt syntaktisch durch ein Tupel repräsentieren, so ist die Bedeutung der Werte dennoch nicht bekannt.

punkt_1 = (54.083336, 12.108811)
punkt_2 = (12.108811, 54.083336)

Was ist die Semantik dieser Werte?

## Slide 8


8

programmieren und datenbanken - objektorientierung

Warum Objekte - Das Verhaltensproblem wiederholter Datenstrukturen

Objekte werden zudem verwendet, um die Funktionen zur Verarbeitung der Datenstrukturen direkt mit dieser zu bündeln, so dass die Datenstruktur nur jene Funktionen anbietet, welche auch sinnvoll anwendbar sind.

Definieren wir z. B. eine Funktion um die Distanz zweier Punkte zu berechnen, so kann man aufgrund der dynamischen Typisierung in Python diese ja auch auf andere Datenstrukturen anwenden, z. B. auf einer Linie. Was falsch wäre.

def distanz(a, b):
    return math.sqrt((a[0]-b[0])**2 + (a[1]-b[1])**2)



punkt_1 = (54.083336, 12.108811)
punkt_2 = (12.108811, 54.083336)

distanz(punkt_1,punkt_2)

linie_1 = [(54.08, 12.11), (54.10, 12.11)]
linie_2 = [(12.11, 54.08), (12.20, 54.10)]

distanz(linie_1, linie_2)

Können die Daten mit der  Funktion verarbeitet werden?

## Slide 9


9

programmieren und datenbanken - objektorientierung

Grundlagen der Objektorientierung

Anstatt unübersichtlich viele verstreute Datenstrukturen und Funktionen zu benutzen, gruppieren wir diese in Objekte. 
Die Struktur dieser Objekte wird in Form von Klassen definiert, welche eine Art Bauplan darstellt. Eine Klasse definiert:
welche Attribute (Variablen / Eigenschaften) ein Objekt dieser Klasse besitzt.
und welche Methoden (Funktionen) ein Objekt der Klasse bereit stellt

Diese werden zusammen in einer komplexen Datenstruktur gespeichert. Jedes Objekt stellt somit einen zusammengesetzten (komplexen) Datentypen dar

## Slide 10


10

programmieren und datenbanken - objektorientierung

Klassen und Instanzen

Objekte selbst sind immer Instanzen einer Klasse (die Klasse ist ja nur ein Bauplan). Eine Klasse kann beliebig viele Instanzen haben oder gar keine. Alle Instanzen sind gleich aufgebaut, besitzen aber nicht unbedingt die gleichen Werte in den Attributen.

Klasse

Instanz 1

Instanz n

## Slide 11


11

programmieren und datenbanken - objektorientierung

Klassen und Instanzen

Objekte selbst sind immer Instanzen einer Klasse (die Klasse ist ja nur ein Bauplan). Eine Klasse kann beliebig viele Instanzen haben oder gar keine. Alle Instanzen sind gleich aufgebaut, besitzen aber nicht unbedingt die gleichen Werte in den Attributen.

Punkt

punkt_1

punkt_n

## Slide 12


12

programmieren und datenbanken - objektorientierung

Objektorientierung in Python

Python ist von Grund auf objektorientiert – ein Fakt den wir bisher ignoriert haben

Alle Datentypen in Python sind Objekte (deshalb haben sie ja auch eigene Methoden)
Selbst definierte Klassen sind immer ein zusammengesetzter (komplexer) Datentyp

Die Bestandteile eines Datentyp-Objektes sind:
Wert
Typ
Identität (ID-Nummer)

Typ und Identität sind immer unveränderlich
Variablen sind Referenzen auf Objekt-Instanzen

## Slide 13


13

programmieren und datenbanken - objektorientierung

Klassen definieren

Der erste Schritt zu einem Objekt ist das Definieren einer neuen Klasse für den Typ des Objektes. Dies geschieht über das class-Kennwort


class Klassenname:
    # Klassendefinition

## Slide 14


14

programmieren und datenbanken - objektorientierung

Konstruktoren mit der init-Methode

Der Konstruktor __init__() ist eine spezielle Methode, die festlegt wie eine neue Instanz der Klasse erzeugt wird. Er wird genutzt um Attribute initial zuzuweisen als auch Initialisierungsschritte (Tests, Berechnungen, Konfigurationen, etc.) durchzuführen.
class Punkt:
    # Konstruktor
    def __init__(self, x, y):
        self.x = x
        self.y = y

self beschreibt eine Selbst-Referenz auf die neue Instanz der Klasse
Auf die Attribute einer Instanz kann durch den Punkt-Syntax zugegriffen werden
self.x ist somit eine Referenz auf das Attribut x der Instanz
self.x = x bedeutet dass wir den Wert der Variablen x dem neuen Instanzattribut x zuweisen (obwohl beide gleich heißen sind sie nicht die gleiche Variable!)
Da __init__ eine Funktion ist, wenn auch besonders, kann man auch Defaults definieren

## Slide 15


15

programmieren und datenbanken - objektorientierung

Instanzen erzeugen

Instanzen der Klasse werden erzeugt indem der Klassenname wie ein Funktionsname benutzt wird

Um Instanzen zu erstellen wird der Klassenname wie ein Funktionsname benutzt (dies ruft den Konstruktor impliziert auf). Hierbei wird der self-Parameter nicht mit angegeben.

punkt_1 = Punkt(54.083336, 12.108811)
punkt_2 = Punkt(12.108811, 54.083336)

## Slide 16


16

programmieren und datenbanken - objektorientierung

Attribute auf Instanzebene

Instanzattribute können in jeder Instanz unterschiedlich sein.
Ändert eine Instanz das Attribut, so wirkt sich die Änderung nicht auf andere Instanzen aus (Isolierung)
Sie werden in dem Konstruktor __init__ definiert.

class Punkt:
    # Konstruktor
    def __init__(self, x, y):
        self.x = x
        self.y = y

## Slide 17


17

programmieren und datenbanken - objektorientierung

Attribute auf Klassenebene

Klassenattribute sind Attribute welche für alle Instanzen einer Klasse den gleichen Wert haben
Sie werden unter dem class-Kennwort wie eine Variable definiert
Wichtig! Sie gelten für alle Instanzen, wenn also eine Instanz den Wert ändert, so ändert er sich in allen anderen Instanzen

class Punkt:
    # Attribut aller Instanzen
    einheit = „m"

## Slide 18


18

programmieren und datenbanken - objektorientierung

Methoden

Methoden werden wie Funktionen mit dem Schlüsselwort def definiert, auf der gleichen Ebene eingerückt wie die Klasse. Diese Methoden sind dann in allen Instanzen verfügbar
Methoden besitzen immer self als ersten Parameter. Auch hier ist das eine Referenz auf aktuelle Instanz. Dadurch kann man dann auf die Attribute oder andere Methoden zugreifen
Man kann Parametern der Methoden auch Defaults zuweisen

class Punkt:     # Methode
    def distanz(self, punkt_2):
        return math.sqrt((self.x - punkt_2.x)**2 + (self.y - punkt_2.y)**2)

## Slide 19


19

programmieren und datenbanken - objektorientierung

Methoden aufrufen

Klassenmethoden sind in allen Instanzen verfügbar
Sie werden durch den Punkt-Syntax aufgerufen, bei der man den Variablennamen links vom Punkt und den Methodennamen rechts vom Punkt aufruft

punkt_1.distanz(punkt_2)

Auf gleiche Weise kann auch auf Attribute zugegriffen werden

print(punkt_1.x, punkt_1.y)

und diese verändert werden

punkt_1.x = 20

## Slide 20


20

Fragen?

Midjourney: A psychedelic DJ with a question mark for a head

programmieren und datenbanken - objektorientierung