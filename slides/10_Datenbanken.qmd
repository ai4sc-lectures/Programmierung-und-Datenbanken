---
title: "Programmieren und Datenbanken - Programmablauf"
author: "Joern Ploennigs"
format: revealjs
---

## Übersicht {background-color="#2c3e50"}

::: {.flex}
::: {.flex-item}
- Fehler und Debugging
- Objektorientierung u. Softwareentwurf  
- *Datenhaltung*
- *Datenbanken*
- *Datenbankentwurf*
:::
::: {.flex-item}
- Trends und KI
- Funktionen und Rekursion
- Modellierung
- Datenbanken
:::
:::



## Relationale Datenbanken Entwerfen {background-color="#34495e"}

![Midjourney: Construction plan of the tower of babel](images/tower_babel.jpg)

*programmieren und datenbanken - datenbankentwurf*



## Zielstellung {background-color="#2980b9"}

::: {.flex}
::: {.flex-item}
*Zentrale Fragen:*

- Wie konzipiert man relationale Datenbanken?
- Was ist das Entity-Relationship Modell?
- Wie entwirft man ER-Diagramme?
:::
::: {.flex-item}
*Weitere Aspekte:*

- Was ist beim Entwurf zu beachten?
- Wie erstellt und verändert man Tabellen mit SQL?
:::
:::

![Midjourney: Learning Target](images/learning_target.jpg)



## Entwurfsvorgehen bei Datenbanken {background-color="#27ae60"}

::: {.flex}
::: {.flex-item}
*Klassisches Wasserfallmodell:*

1. *Anforderungsanalyse*
2. *Konzeptioneller Entwurf*
3. *Logischer Entwurf*
4. *Physikalischer Entwurf*
5. *Implementation und Test*
6. *Einsatz und Wartung*
:::
::: {.flex-item}
*Detaillierte Beschreibung:*

- *Anforderungsanalyse*: Welche Anforderungen und Anwendungsfälle stellen sich an die DB?
- *Konzeptioneller Entwurf*: Grobentwurf im ER-Diagramm mit Entitäten, Attributen und Relationen
- *Logischer Entwurf*: Detailentwurf des konkreten Datenbankschemas für spezielle DBMS
- *Physikalischer Entwurf*: Primärindexe und Suchindexe zur Zugriffsoptimierung
- *Implementation*: Erstellung der Datenbank mit SQL
- *Wartung*: Verwendung der Datenbank
:::
:::



## Entity-Relationship Modell - Einführung {background-color="#8e44ad"}

*Was sind ER-Modelle?*

- Entity-Relationship Modelle entwerfen das Datenmodell einer Datenbank
- Legen fest: *was*, *wie* und mit *welchen Zusammenhängen* gespeichert wird
- Häufig in Dokumentationen und Ausschreibungen von Software zu finden
- Entwickelt 1976 von Peter Chen: *"The Entity-Relationship Model"*
- *Verschiedene Varianten* von ER-Diagrammen existieren



## ER-Modell - Grundbegriffe {background-color="#e74c3c"}

::: {.flex}
::: {.flex-item}
*Zentrale Konzepte:*

- *Entitätstyp (Entity Type)*: Klasse von Objekten
  - *Beispiel*: Punkt, Linie, Polygon

- *Entität (Entity)*: Einzelnes identifizierbares Objekt
  - *Beispiel*: Ein einzelner Punkt
:::
::: {.flex-item}
*Weitere Komponenten:*

- *Attribute*: Eigenschaften einer Entität
  - *Beispiel*: x,y-Koordinaten eines Punktes

- *Beziehung (Relationship)*: Zusammenhänge zwischen Entitäten
  - *Beispiel*: Punkt 0,0 "gehört_zu" Linie 1
  - Semantischer Typ = "Relationship Type"
:::
:::



## Diagrammarten - Verschiedene Notationen {background-color="#f39c12"}

::: {.flex}
::: {.flex-item}
*Historische Entwicklung:*

- *Chen-Notation* (Peter Chen, 1976)
- *IDEF1X* (USA Behörden Standard, 1985)  
- *Bachman-Notation* (Charles Bachman, 1969)
:::
::: {.flex-item}
*Moderne Ansätze:*

- *Krähenfuß-Notation* (Gordon Everest, 1976)
- *(min, max)-Notation* (Jean-Raymond Abrial, 1974)
- *UML* als ISO-Standard (Ersatz für ER-Diagramme)
:::
:::

*Quelle: https://de.wikipedia.org/wiki/Datei:ERD_Darstellungen.png*



## Begriffsunterschiede - Terminologie {background-color="#16a085"}

| Objektorientierung | Relationale Datenbank | ER-Diagramme |
|-||--|
| Objektinstanz | Datentupel | Entität |
| Klassen | Relationen | Entitätstyp |
| Klassendefinition | Relationenschema | Entity-Relationship-Modell |
| Attribute | Attribute | Attribute |
| Assoziation | Fremdschlüssel | Relationen |
| Multiplizitäten | - | Kardinalitäten |



## OOP vs. Relationale Datenbanken - Vergleich {background-color="#d35400"}

::: {.flex}
::: {.flex-item}
*Objektorientierung:*

- ✅ Modellierung als Objekte
- ✅ Attribute
- ✅ Methoden
- ✅ Vererbung
- ✅ Polymorphismus
- ✅ Generalisierung
- ✅ Aggregation
- ✅ Kapselung
:::
::: {.flex-item}
*Relationale Datenbanken:*

- ✅ Modellierung als Relationen
- ✅ Attribute
- ❌ Methoden
- ❌ Vererbung
- ❌ Polymorphismus
- ❌ Generalisierung
- ❌ Aggregation
- ✅ Kapselung
:::
:::



## Objektorientierter Softwareentwurf {background-color="#9b59b6"}

*Programm aus Objekten:*

Im objektorientierten Softwareentwurf wird modelliert:

- *Klassendefinition*: Wie sind Objekte in Form von Klassen definiert?
- *Attribute und Methoden*: Welche Eigenschaften und Verhalten besitzen sie?
- *Vererbung*: Wie bauen Klassen aufeinander auf?
- *Statische Beziehungen*: Wie stehen sie in Referenz zueinander?
- *Dynamische Interaktion*: Wie interagieren sie zur Laufzeit?

*Ähnlich*: Ingenieurspläne (z.B. Baupläne)  
*Modellierungssprache*: UML-Diagramme



## Datenbankentwurf {background-color="#2ecc71"}

*Datenbank aus Entitäten:*

Im Datenbankentwurf wird modelliert:

- *Entitätstypen*: Wie sind sie in Form von Tabellen definiert?
- *Attribute*: Welche Eigenschaften besitzen Entitäten als Spalten?
- *Statische Beziehungen*: Wie stehen sie in Relation zueinander?

*Ähnlich*: Ingenieurspläne (z.B. Baupläne)  
*Modellierungssprache*: Entity-Relationship Diagramme



## UML für ER-Diagramme - Besonderheiten {background-color="#e67e22"}

::: {.flex}
::: {.flex-item}
*Spezielle Notation:*

- Klassen mit `<<Entity>>` annotieren
- Attribute als Klassenattribute mit Datentyp
- *PK* kennzeichnet Primärschlüssel
- Fremdschlüssel als Assoziationen
:::
::: {.flex-item}
*Beziehungen:*

- Leserichtung: `<<` oder `>>`
- Zahlen geben *Kardinalität* an
- *Keine Methoden!*
:::
:::



## Kardinalitäten (Multiplizitäten) {background-color="#34495e"}

*Beschreibung der Beziehungsanzahl:*

::: {.flex}
::: {.flex-item}
*Beispiele:*

- *1 zu 1*: Person ist geboren in einem Ort
- *1 zu 0..1*: Person ist gestorben in null bis einem Ort
:::
::: {.flex-item}
*Weitere Beispiele:*

- *1 zu 0..\**: Person macht Ferien in null bis vielen Orten  
- *1 zu 1..\**: Person war bereits in einem bis vielen Orten
:::
:::

> *Wichtig*: Gegenrichtung macht keine Aussage über Kardinalität!



## Fragen? {background-color="#2c3e50"}

![Midjourney: A psychedelic DJ with a question mark for a head](images/question_dj.jpg)

*Hörsaalfrage*



## CSS Styling

```css
/* Custom CSS für Flex Layout */
.flex {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 2rem;
}

.flex-item {
  flex: 1;
  min-width: 0;
}

/* Responsive Design */
@media (max-width: 768px) {
  .flex {
    flex-direction: column;
  }
}

/* Zusätzliche Styles für bessere Präsentation */
.reveal h2 {
  color: #ffffff;
  text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
}

.reveal .slides section {
  padding: 2rem;
}

/* Tabellen-Styling */
table {
  font-size: 0.8em;
  margin: 1rem auto;
}

th {
  background-color: rgba(255,255,255,0.2);
}

tr:nth-child(even) {
  background-color: rgba(255,255,255,0.1);
}
```