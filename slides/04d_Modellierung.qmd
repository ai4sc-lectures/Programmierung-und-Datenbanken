---
title: "Programmieren und Datenbanken - Modellierung"
author: "Joern Ploennigs"
format: revealjs
---

# Modellierung mit Objekten

Unsere Wahrnehmung basiert auf Objekten.  
Ein Modell ist eine abstrakte, vereinfachte Abbildung eines Systems.

---

<div class="flex">
<div class="column">

**Objektverständnis:**  
- Objekte trennbar (z. B. Stuhl vs. Tisch)  
- Systeme = von Umwelt trennbar

</div>
<div class="column">

**Modellierung in Software:**  
- Verhalten: über Funktionen  
- Objekte: über Klassen  
- Variablen: werden verändert

</div>
</div>

---

# Was haben diese Elemente gemein?

> Geometrische Objekte: Punkte & Linien  
> Diese Struktur kann bei der Klassendefinition genutzt werden.

---

# Objektorientierter Softwareentwurf

- Programme bestehen aus Objekten
- Entwurf umfasst:
  - Klassen
  - Attribute & Methoden
  - Vererbung & Referenzen
  - Verhalten
- Modellierungssprache: **UML Diagramme**

---

# Objektorientierter Softwareentwurf – Referenzen

```python
class Line:
    def __init__(self, start: Point, end: Point):
        self.start = start
        self.end = end

    def length(self):
        return self.start.distance(self.end)
```

---

# Objektorientierter Softwareentwurf – Vererbung

- Gemeinsame Eigenschaften in Oberklasse
- Unterklassen erben Attribute & Methoden
- Vermeidung von Redundanz & Fehlern

---

# Beispiel Vererbung

```text
Polygon
 ├── Linie
 ├── Dreieck
 └── Viereck
```

---

# Polymorphie

- Objekte der Unterklasse gelten als Basisklasse
- Methoden/Attribute können überschrieben werden
- Variable der Basisklasse kann Instanz der Unterklasse enthalten

---

# Datenkapselung

<div class="flex">
<div class="column">

**Zugriffsmodifikatoren:**  
- `private`: nur innerhalb der Klasse  
- `protected`: auch in Unterklassen  
- `public`: überall

</div>
<div class="column">

**Getter & Setter:**  
- Kontrolle über Zugriff  
- Nur lesen/schreiben via Funktionen möglich

</div>
</div>

---

# Dynamik in Klassen

- Python ist dynamisch:
  - Attribute/Methoden zur Laufzeit erweiterbar
  - Dynamische Typisierung
- Mehr Flexibilität als in statischen Sprachen

---

# Übersicht OOP-Paradigmen

<div class="flex">
<div class="column">

**Generalisierung:**  
Gemeinsamkeiten in Elternklassen

**Vererbung:**  
Attribute & Methoden vererbt

</div>
<div class="column">

**Kapselung:**  
Schutz vor schadhafter Änderung

**Polymorphie:**  
Methoden können überschrieben werden

</div>
</div>

---

# UML – Grundlagen

- ISO-Standard zur Modellierung
- Anwendung für:
  - Funktionalitäten
  - Strukturen
  - Prozesse
  - Interaktionen

---

# UML – Diagrammtypen

- Klassendiagramme  
- Programmablaufplan  
- Sequenzdiagramme  
- Use-Case-Diagramme

---

# UML – Klassendiagramm

> Häufigstes Diagramm bei OOP  
> Enthält:
- Klassen, Attribute, Methoden
- Beziehungen & Hierarchien

---

# UML – Vererbung

- Gezeichnet mit ▲ zur Oberklasse  
Beispiel:
```text
Polygon
 ├── Triangle
 ├── Tetragon
 └── Pentagon
```

---

# UML – Referenzen

- Linien zeigen Beziehungen zwischen Objekten
- Arten:
  - Aggregation
  - Komposition
  - Assoziation
- Multiplizität zeigt Anzahl der Objekte in Relation

---

# UML – Gesamtbeispiel

> Anwendung: Building Information Models (BIM)  
> Beispielhafte Nutzung von:
- Vererbung
- Spezialisierung
- Generalisierung
- Polymorphismus

---

# Literaturhinweise

- [Python Data Model – offizielle Doku](https://docs.python.org/3/reference/datamodel.html)  
- [RealPython Einführung OOP](https://realpython.com/python3-object-oriented-programming/)

---

# Fragen?

> Midjourney: A psychedelic DJ with a question mark for a head
